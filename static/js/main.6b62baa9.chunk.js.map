{"version":3,"sources":["components/Form/Form.js","store/actions/todoAction.js","store/actions/actionTypes.js","store/actions/noteAction.js","components/TextAndForm.js","components/List/List.js","components/NotesList/NotesList.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClickChoice","value","setState","choice","onChangeHandler","e","text","target","onSubmit","state","addTodos","addNotes","_this2","styleButtonTodo","styleButtonNotes","react_default","a","createElement","Fragment","className","concat","onClick","onChange","type","placeholder","Component","connect","dispatch","todo","payload","addTodo","note","addNote","TextAndForm","editButtonHandler","viewMode","saveButtonHandler","editTodo","index","cancelButtonHandler","deleteButtonHandler","deleteTodo","buttonEdit","List","todos","map","key","components_TextAndForm","todoReducer","NotesList","notes","noteReducer","initialStateTodos","initialStateNotes","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","toConsumableArray","newTodos","filter","element","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","handleSubmit","prevState","es","components_Form_Form","components_List_List","components_NotesList_NotesList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b62baa9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo } from '../../store/actions/todoAction'\nimport { addNote } from '../../store/actions/noteAction'\n\nclass Form extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      text: '',\n      choice: 'Todo'\n    }\n  }  \n\n  onClickChoice = (value) => {\n    this.setState({ choice: value})\n  }\n  onChangeHandler = (e) => {\n    this.setState({ text : e.target.value })\n  }\n\n  onSubmit = () => {\n    if (this.state.choice === 'Todo'){\n      this.props.addTodos(this.state.text)\n    } else {\n      this.props.addNotes(this.state.text)\n    }\n    this.setState({ text: '' })\n  }\n\n  render () {\n    var styleButtonTodo = ''\n    var styleButtonNotes =''\n    if (this.state.choice === 'Todo'){\n      styleButtonTodo = 'btn-success'\n    } else {\n      styleButtonNotes = 'btn-success'\n    }\n\n    return (\n      <>\n        <button \n            className={`btn m-2 ${styleButtonTodo}`}\n            onClick={() => this.onClickChoice('Todo')}\n        >\n            Switch to Add Todo\n        </button>\n        <button \n            className={`btn ${styleButtonNotes}`}\n            onClick={() => this.onClickChoice('Notes')}\n        >\n            Switch to Add Notes\n        </button>\n\n        <p>Add {this.state.choice}</p>\n        <div className=\"form-group\">\n          <input \n          value={this.state.text}\n          onChange={this.onChangeHandler} type=\"text\" className=\"form-control\" placeholder=\"Type todo here\" />\n        </div>\n        <button onClick={this.onSubmit} className=\"btn btn-primary\">Add</button>\n      </>\n    )\n  }\n} \n\n\nconst mapDispatcToProps = dispatch => {\n  return {\n    addTodos: (todo) => dispatch(addTodo(todo)),\n    addNotes: (note) => dispatch(addNote(note))\n  }\n}\n\n//export default Form\nexport default connect(null, mapDispatcToProps)(Form)\n","import * as actionTypes from './actionTypes'\r\n\r\nexport const addTodo = (todo)=> ({ \r\n    type: actionTypes.ADD_TODOS, \r\n    payload:todo \r\n})\r\n\r\n\r\nexport const editTodo = (payload) => ({\r\n    type: actionTypes.EDIT_TODO,\r\n    payload: payload\r\n  })\r\n  \r\nexport const deleteTodo = (index) => ({\r\n    type: actionTypes.DELETE_TODO,\r\n    payload: index\r\n  })","export const ADD_TODOS     = 'ADD_TODOS'\r\nexport const EDIT_TODO    = 'EDIT_TODO'\r\nexport const DELETE_TODO  = 'DELETE_TODO'\r\n\r\nexport const ADD_NOTE     = 'ADD_NOTE'","import * as actionTypes from './actionTypes'\r\n\r\nexport const addNote = (note) => ({\r\n    type: actionTypes.ADD_NOTE,\r\n    payload: note\r\n})","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { editTodo, deleteTodo } from '../store/actions/todoAction'\r\n\r\nclass TextAndForm extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            viewMode: '',\r\n            text: ''\r\n        } \r\n    }\r\n\r\n    //Handle ketika user klik tomobol edit\r\n    editButtonHandler = () => {\r\n        this.setState({viewMode:'edit'})\r\n    }\r\n\r\n    //handle ketika user toombol save\r\n    saveButtonHandler = () => {\r\n        this.props.editTodo(this.props.index, this.state.text)\r\n        this.setState({viewMode:'show'})\r\n    }\r\n\r\n    //handle tombool cancel\r\n    cancelButtonHandler = () => {\r\n        this.setState({viewMode: 'show'})\r\n    }\r\n\r\n    //handle ketika tombol delet diclick\r\n    deleteButtonHandler = () => {\r\n        this.props.deleteTodo(this.props.index)\r\n    }\r\n    \r\n    //handle ketika user edit text\r\n    onChangeHandler = (e) => {\r\n        this.setState({text: e.target.value})\r\n    }\r\n    \r\n\r\n    render() {\r\n        //default tampilan todu berupa text\r\n        var todo = (\r\n            <p>{this.props.todo}</p>\r\n        )\r\n        //defaul tampilan dismaping text todo\r\n        var buttonEdit = (\r\n            <button \r\n                className=\"btn btn-primary\"\r\n                onClick = {this.editButtonHandler}\r\n            >\r\n                Edit\r\n            </button>\r\n        )\r\n        //Jika viemode berubah menjadi edit\r\n        if (this.state.viewMode === 'edit') {\r\n            //ganti element text todo menjadi edit\r\n            todo = (\r\n                <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    value={this.state.text}\r\n                    onChange={this.onChangeHandler}\r\n                />\r\n            )\r\n\r\n            buttonEdit = (\r\n                <>\r\n                <button \r\n                    className=\"btn btn-success\"\r\n                    onClick={this.saveButtonHandler}\r\n                >\r\n                    Save\r\n                </button>\r\n                <button \r\n                    className=\"btn btn-warning\"\r\n                    onClick={this.cancelButtonHandler}\r\n                >\r\n                    Cancel\r\n                </button>\r\n                </>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-8\">\r\n                    {todo}\r\n                </div>\r\n                <div className=\"col-4\">\r\n                    {buttonEdit}\r\n                    <button \r\n                        className=\"btn btn-danger\"\r\n                        onClick={this.deleteButtonHandler}\r\n                    >\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n            </div> \r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatcToProps = dispatch => {\r\n    return {\r\n        editTodo: (index, todo) => dispatch (editTodo({ index, todo })),\r\n        deleteTodo: (index) => dispatch(deleteTodo(index))\r\n    }\r\n}\r\n\r\nexport default connect(null,mapDispatcToProps)(TextAndForm)\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport TextAndForm from '../TextAndForm';\n\n\nclass List extends Component {\n\n  render (){\n    return (\n      <ul className=\"list-group\">\n        {this.props.todos.map((todo,index) => (\n          <li key={index} className=\"list-group-item container\">\n            \n            <TextAndForm \n              todo={todo}\n              index={index}\n              //onDelete={ ()=> this.deleteHandler(index)}\n            />\n          </li>\n        ))}\n      </ul>\n    )    \n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todoReducer.todos\n  }\n}\n\n\n\n//export default List\nexport default connect(mapStateToProps, null) (List)\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nclass NotesList extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>Notes</p>\r\n                <ul className=\"list-group\">\r\n                    {this.props.notes.map((note,index) => (\r\n                        <li key={index} className=\"list-group-item container\">\r\n                            {note}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        notes: state.noteReducer.notes\r\n    }\r\n}\r\nexport default connect(mapStateToProps, null) (NotesList)\r\n","import { createStore, combineReducers } from 'redux';\r\nimport * as actionTypes from '../store/actions/actionTypes'\r\n\r\nconst initialStateTodos = {\r\n    todos: [],\r\n}\r\nconst initialStateNotes = {\r\n    notes:[]\r\n    \r\n}\r\n\r\n\r\nconst todoReducer = (state = initialStateTodos, action) =>{\r\n    switch(action.type){\r\n        case actionTypes.ADD_TODOS:\r\n            return {\r\n                ...state,\r\n                todos: [...state.todos, action.payload]\r\n            }\r\n        case actionTypes.DELETE_TODO:\r\n            //menghapus dengan methode splice\r\n            //copy state todos\r\n            //let newTodos = [...state.todos]\r\n            //hapus elemen array\r\n            //newTodos.splice(action.payload.index, 1)\r\n            //let newTodos = state.todos.filter((element, index) => index !== action.payload.index)\r\n            let newTodos = state.todos.filter((element, index) => index !== action.payload)\r\n\r\n            return{\r\n                ...state,\r\n                todos: newTodos\r\n            }\r\n        case actionTypes.EDIT_TODO:\r\n            //edit state\r\n            //copy state todos\r\n            let todos = [...state.todos]\r\n            //ganti data to do\r\n            let index = action.payload.index\r\n            let todo = action.payload.todo\r\n            todos[index] = todo\r\n            return {\r\n                ...state,\r\n                todos\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\nconst noteReducer = (state = initialStateNotes, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_NOTE:\r\n            return{\r\n                ...state,\r\n                notes: [...state.notes, action.payload]\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    todoReducer: todoReducer,\r\n    noteReducer: noteReducer\r\n})\r\n\r\n//const store = createStore(rootReducer)\r\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\nexport default store","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './components/Form/Form';\nimport List from './components/List/List';\nimport Notes from './components/NotesList/NotesList'\nimport { Provider } from 'react-redux';\nimport store from './store'\n\nclass App extends Component {\n  constructor () {\n    super()\n    this.state = {\n      todos: []\n    }\n  }\n  \n  handleSubmit = (todo) => {\n    this.setState(prevState => (\n      {todos: prevState.todos.concat(todo) }\n    ))\n  }\n\n  render() {\n    return (\n      <Provider store={store}>\n      <div className=\"App container\">\n        <Form />\n        <List />    \n        <Notes />    \n      </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}